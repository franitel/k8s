Secrets

Secrets provide a way in Kubernetes to distribute credentials, keys, passords, or
secret data to the pods.

Kubernetes itself uses Secrets as a mechanism to provide the credentials to access the internal API

You can use the same mechanisn to provide secrets to your application

Secrets s one way to proice secrests, native to Kebernetes
 - There are other ways your container can get is seccrets if you don't want to
 use Secrets (e.g. using an external ault service in your app).

 Secrets can be used as:

 - environment variables
 - use secrets as a file in a pod
  -- this setup uses volumes to be mounted in a container
  -- in this volume you have files
  -- Can be used for instance for dotenv files or your app can just read this file.

- Use an external iage to pull secrets (from a private image registry)


To generate secrets using files:

kubectl create secret geneic <name> --from-file=name.txt

SSH key or SSL Certificate

kubectl create secret generic ssl-certificate --from-file=ssh-priagtekey=~/.ssh/id-ras --ssl-cert=mysslcert.crt.

Secrets using yaml definitions

1. Create the yaml file.
2. Use a base64 encoder to change the values to base 64
3. Then deploye using kubectl create -f secrets secrets-db-secret.yaml

apiVersion: v1
kind: Secret
metadata:
  name: helloworld-secrets
type: Opaque
data:
  username: aGVsbG93b3JsZA==
  password: cGFzc3dvcmQ=
  rootPassword: cm9vdHBhc3N3b3Jk
  database: aGVsbG93b3JsZA==

To create the base 64 values

echo -n "username" | base64
>aGVsbG93b3JsZA==

To use:

1. Create a pod that exposes the secrets as environment variables.


apiVersion: v1
kind: Pod
metadata:
  name: nodehelloworld.example.com
  labels:
    app: helloworld
spec:
  containers:
  - name: k8s-demo
    image: wardviaene/k8s-demo
    ports:
    - name: nodejs-port
      containerPort: 3000  # add below this line =======
  env:
   - name: SECRET_USERNAME
   valueFrom:
     secretKeyRef:
      name: db-secret
      key: username
    - names: SECRET_PASSWORD
      etc....

2. Or you can put the secrets in a file

apiVersion: v1
kind: Pod
metadata:
  name: nodehelloworld.example.com
  labels:
    app: helloworld
spec:
  containers:
  - name: k8s-demo
    image: wardviaene/k8s-demo
    ports:
      containerPort: 3000  # add below this line =======
  volumeMounts:
  -name: credvolume
   mountPath: /etc/creds
   readOnly: true
  volumes:
  -name: credvolume
  secret:
  secretName: db-secrets

DEMO:   This is titled Credentials using Volumes

cat deployment/helloworld-secrets.yml

apiVersion: v1
kind: Secret
metadata:
  name: db-secrets
type: Opaque
data:
  username: cm9vdA==
  password: cGFzc3dvcmQ=

kubectl create -f  deployment/helloworld-secrets.yml

secret "db-secrets" created

cat deployment/helloworld-secrets-volumes.yml


apiVersion: extensions/v1beta1
kind: Deployment
metadata:
 name: helloworld-deployment
spec:
 replicas: 3
 template:
   metadata:
     labels:
       app: helloworld
   spec:
     containers:
     - name: k8s-demo
       image: wardviaene/k8s-demo
       ports:
       - name: nodejs-port
         containerPort: 3000
       volumeMounts:
       - name: cred-volume
         mountPath: /etc/creds
         readOnly: true
     volumes:
     - name: cred-volume
       secret:
         secretName: db-secrets

kubectl create -f  deployment/helloworld-secrets-volumes.yml

deployment "helloworld-deployment" created

kubectl get pods
NAME                                    READY     STATUS    RESTARTS   AGE
helloworld-deployment-d9ff6d944-9tmtp   1/1       Running   0          1m
helloworld-deployment-d9ff6d944-czvtt   1/1       Running   0          1m
helloworld-deployment-d9ff6d944-mq4dz   1/1       Running   0          1m
nodehelloworld.example.com              1/1       Running   0          4d

kubectl describe pod helloworld-deployment-d9ff6d944-9tmtp


Name:           helloworld-deployment-d9ff6d944-9tmtp
Namespace:      default
Node:           minikube/192.168.99.100
Start Time:     Wed, 27 Dec 2017 21:46:15 -0500
Labels:         app=helloworld
                pod-template-hash=859928500
Annotations:    kubernetes.io/created-by={"kind":"SerializedReference","apiVersion":"v1","reference":{"kind":"ReplicaSet","namespace":"default","name":"helloworld-deployment-d9ff6d944","uid":"462821c3-eb79-11e7-9ced-...
Status:         Running
IP:             172.17.0.4
Created By:     ReplicaSet/helloworld-deployment-d9ff6d944
Controlled By:  ReplicaSet/helloworld-deployment-d9ff6d944
Containers:
  k8s-demo:
    Container ID:   docker://40c996ef2c6e31435409d4ee6c65e704feab76017bd882550c83b3e049183304
    Image:          wardviaene/k8s-demo
    Image ID:       docker-pullable://wardviaene/k8s-demo@sha256:2c050f462f5d0b3a6430e7869bcdfe6ac48a447a89da79a56d0ef61460c7ab9e
    Port:           3000/TCP
    State:          Running
      Started:      Wed, 27 Dec 2017 21:46:22 -0500
    Ready:          True
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /etc/creds from cred-volume (ro)
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-n9twd (ro)
Conditions:
  Type           Status
  Initialized    True
  Ready          True
  PodScheduled   True
Volumes:
  cred-volume:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  db-secrets
    Optional:    false
  default-token-n9twd:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-n9twd
    Optional:    false
QoS Class:       BestEffort
Node-Selectors:  <none>
Tolerations:     <none>
Events:
  Type    Reason                 Age   From               Message
  ----    ------                 ----  ----               -------
  Normal  Scheduled              2m    default-scheduler  Successfully assigned helloworld-deployment-d9ff6d944-9tmtp to minikube
  Normal  SuccessfulMountVolume  2m    kubelet, minikube  MountVolume.SetUp succeeded for volume "cred-volume"
  Normal  SuccessfulMountVolume  2m    kubelet, minikube  MountVolume.SetUp succeeded for volume "default-token-n9twd"
  Normal  Pulling                2m    kubelet, minikube  pulling image "wardviaene/k8s-demo"
  Normal  Pulled                 2m    kubelet, minikube  Successfully pulled image "wardviaene/k8s-demo"
  Normal  Created                2m    kubelet, minikube  Created container
  Normal  Started                2m    kubelet, minikube  Started container


  important parameterMounts:
    /etc/creds from cred-volume (ro)
    /var/run/secrets/kubernetes.io/serviceaccount from default-token-n9twd (ro)

 cat /etc/creds/username

    rootroot@helloworld-deployment-d9ff6d944-9tmtp:/app#

mount

    overlay on / type overlay (rw,relatime,lowerdir=/var/lib/docker/overlay2/l/PBMVQKVPK3MOSOMOJXIUR2MBJW:/var/lib/docker/overlay2/l/UHA6R6MYEFEBDVUTJDIMR2AR4D:/var/lib/docker/overlay2/l/AR2FCPYW4BRA5SXMWVIE3ZCHNM:/var/lib/docker/overlay2/l/FSZSP2T37NI27FU4KP56ZZ7ED2:/var/lib/docker/overlay2/l/GJHOSVMPSITALNPGUXOQMUBJC3:/var/lib/docker/overlay2/l/L5ZJHWLGCQXWW7SYISRNDBLDKP:/var/lib/docker/overlay2/l/DQIKHFTUQCYZI45TJVF4VB5ZJC:/var/lib/docker/overlay2/l/2VNUJV6DL6AFCYZGS7MIHRPIQZ:/var/lib/docker/overlay2/l/MKQYRWGKPB7S23AMOISNU4JZGQ:/var/lib/docker/overlay2/l/KYBIEJL2UEXZFNW6Z7H4CB7PJ5:/var/lib/docker/overlay2/l/I5CA4QJI56EX7VEKEUHCZ22MW4,upperdir=/var/lib/docker/overlay2/09d261ca06eaf666f3fffa44f4b939587efd400fd947af318c26c99176e0dc2f/diff,workdir=/var/lib/docker/overlay2/09d261ca06eaf666f3fffa44f4b939587efd400fd947af318c26c99176e0dc2f/work)
    proc on /proc type proc (rw,nosuid,nodev,noexec,relatime)
    tmpfs on /dev type tmpfs (rw,nosuid,mode=755)
    devpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=666)
    sysfs on /sys type sysfs (ro,nosuid,nodev,noexec,relatime)
    tmpfs on /sys/fs/cgroup type tmpfs (ro,nosuid,nodev,noexec,relatime,mode=755)
    cgroup on /sys/fs/cgroup/systemd type cgroup (ro,nosuid,nodev,noexec,relatime,xattr,release_agent=/lib/systemd/systemd-cgroups-agent,name=systemd)
    cgroup on /sys/fs/cgroup/cpuset type cgroup (ro,nosuid,nodev,noexec,relatime,cpuset)
    cgroup on /sys/fs/cgroup/blkio type cgroup (ro,nosuid,nodev,noexec,relatime,blkio)
    cgroup on /sys/fs/cgroup/memory type cgroup (ro,nosuid,nodev,noexec,relatime,memory)
    cgroup on /sys/fs/cgroup/perf_event type cgroup (ro,nosuid,nodev,noexec,relatime,perf_event)
    cgroup on /sys/fs/cgroup/hugetlb type cgroup (ro,nosuid,nodev,noexec,relatime,hugetlb)
    cgroup on /sys/fs/cgroup/cpu,cpuacct type cgroup (ro,nosuid,nodev,noexec,relatime,cpu,cpuacct)
    cgroup on /sys/fs/cgroup/freezer type cgroup (ro,nosuid,nodev,noexec,relatime,freezer)
    cgroup on /sys/fs/cgroup/net_cls type cgroup (ro,nosuid,nodev,noexec,relatime,net_cls)
    cgroup on /sys/fs/cgroup/devices type cgroup (ro,nosuid,nodev,noexec,relatime,devices)
    cgroup on /sys/fs/cgroup/pids type cgroup (ro,nosuid,nodev,noexec,relatime,pids)
    mqueue on /dev/mqueue type mqueue (rw,nosuid,nodev,noexec,relatime)
    tmpfs on /etc/creds type tmpfs (ro,relatime)
    /dev/sda1 on /dev/termination-log type ext4 (rw,relatime,data=ordered)
    /dev/sda1 on /etc/resolv.conf type ext4 (rw,relatime,data=ordered)
    /dev/sda1 on /etc/hostname type ext4 (rw,relatime,data=ordered)
    /dev/sda1 on /etc/hosts type ext4 (rw,relatime,data=ordered)
    shm on /dev/shm type tmpfs (rw,nosuid,nodev,noexec,relatime,size=65536k)
    tmpfs on /run/secrets/kubernetes.io/serviceaccount type tmpfs (ro,relatime)
    proc on /proc/asound type proc (ro,relatime)
    proc on /proc/bus type proc (ro,relatime)
    proc on /proc/fs type proc (ro,relatime)
    proc on /proc/irq type proc (ro,relatime)
    proc on /proc/sys type proc (ro,relatime)
    proc on /proc/sysrq-trigger type proc (ro,relatime)
    tmpfs on /proc/kcore type tmpfs (rw,nosuid,mode=755)
    tmpfs on /proc/timer_list type tmpfs (rw,nosuid,mode=755)
    tmpfs on /proc/timer_stats type tmpfs (rw,nosuid,mode=755)
    tmpfs on /sys/firmware type tmpfs (ro,relatime)

The mount points above are:

tmpfs on /etc/creds type tmpfs (ro,relatime)

tmpfs on /run/secrets/kubernetes.io/serviceaccount type tmpfs (ro,relatime)


ls /run/secrets/kubernetes.io/serviceaccount

> ca.crt	namespace  token

exit exits the shell... 






.
